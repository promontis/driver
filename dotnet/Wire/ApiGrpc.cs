// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Streamsdb.Wire {
  public static partial class Streams
  {
    static readonly string __ServiceName = "streamsdb.api.Streams";

    static readonly grpc::Marshaller<global::Streamsdb.Wire.GetDatabasesRequest> __Marshaller_streamsdb_api_GetDatabasesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.GetDatabasesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.GetDatabasesReply> __Marshaller_streamsdb_api_GetDatabasesReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.GetDatabasesReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.GetDatabaseRequest> __Marshaller_streamsdb_api_GetDatabaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.GetDatabaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.GetDatabaseReply> __Marshaller_streamsdb_api_GetDatabaseReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.GetDatabaseReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.LoginRequest> __Marshaller_streamsdb_api_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.LoginReply> __Marshaller_streamsdb_api_LoginReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.LoginReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.EnableAclRequest> __Marshaller_streamsdb_api_EnableAclRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.EnableAclRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.EnableAclReply> __Marshaller_streamsdb_api_EnableAclReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.EnableAclReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.GrandUserToDatabaseRequest> __Marshaller_streamsdb_api_GrandUserToDatabaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.GrandUserToDatabaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.GrandUserToDatabaseReply> __Marshaller_streamsdb_api_GrandUserToDatabaseReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.GrandUserToDatabaseReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.CreateUserRequest> __Marshaller_streamsdb_api_CreateUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.CreateUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.CreateUserReply> __Marshaller_streamsdb_api_CreateUserReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.CreateUserReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.CreateDatabaseRequest> __Marshaller_streamsdb_api_CreateDatabaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.CreateDatabaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.CreateDatabaseReply> __Marshaller_streamsdb_api_CreateDatabaseReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.CreateDatabaseReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.ReadRequest> __Marshaller_streamsdb_api_ReadRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.ReadRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.Slice> __Marshaller_streamsdb_api_Slice = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.Slice.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.AppendRequest> __Marshaller_streamsdb_api_AppendRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.AppendRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Streamsdb.Wire.AppendReply> __Marshaller_streamsdb_api_AppendReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Streamsdb.Wire.AppendReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Streamsdb.Wire.GetDatabasesRequest, global::Streamsdb.Wire.GetDatabasesReply> __Method_GetDatabases = new grpc::Method<global::Streamsdb.Wire.GetDatabasesRequest, global::Streamsdb.Wire.GetDatabasesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatabases",
        __Marshaller_streamsdb_api_GetDatabasesRequest,
        __Marshaller_streamsdb_api_GetDatabasesReply);

    static readonly grpc::Method<global::Streamsdb.Wire.GetDatabaseRequest, global::Streamsdb.Wire.GetDatabaseReply> __Method_GetDatabase = new grpc::Method<global::Streamsdb.Wire.GetDatabaseRequest, global::Streamsdb.Wire.GetDatabaseReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatabase",
        __Marshaller_streamsdb_api_GetDatabaseRequest,
        __Marshaller_streamsdb_api_GetDatabaseReply);

    static readonly grpc::Method<global::Streamsdb.Wire.LoginRequest, global::Streamsdb.Wire.LoginReply> __Method_Login = new grpc::Method<global::Streamsdb.Wire.LoginRequest, global::Streamsdb.Wire.LoginReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_streamsdb_api_LoginRequest,
        __Marshaller_streamsdb_api_LoginReply);

    static readonly grpc::Method<global::Streamsdb.Wire.EnableAclRequest, global::Streamsdb.Wire.EnableAclReply> __Method_EnableAcl = new grpc::Method<global::Streamsdb.Wire.EnableAclRequest, global::Streamsdb.Wire.EnableAclReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableAcl",
        __Marshaller_streamsdb_api_EnableAclRequest,
        __Marshaller_streamsdb_api_EnableAclReply);

    static readonly grpc::Method<global::Streamsdb.Wire.GrandUserToDatabaseRequest, global::Streamsdb.Wire.GrandUserToDatabaseReply> __Method_GrandUserToDatabase = new grpc::Method<global::Streamsdb.Wire.GrandUserToDatabaseRequest, global::Streamsdb.Wire.GrandUserToDatabaseReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GrandUserToDatabase",
        __Marshaller_streamsdb_api_GrandUserToDatabaseRequest,
        __Marshaller_streamsdb_api_GrandUserToDatabaseReply);

    static readonly grpc::Method<global::Streamsdb.Wire.CreateUserRequest, global::Streamsdb.Wire.CreateUserReply> __Method_CreateUser = new grpc::Method<global::Streamsdb.Wire.CreateUserRequest, global::Streamsdb.Wire.CreateUserReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateUser",
        __Marshaller_streamsdb_api_CreateUserRequest,
        __Marshaller_streamsdb_api_CreateUserReply);

    static readonly grpc::Method<global::Streamsdb.Wire.CreateDatabaseRequest, global::Streamsdb.Wire.CreateDatabaseReply> __Method_CreateDatabase = new grpc::Method<global::Streamsdb.Wire.CreateDatabaseRequest, global::Streamsdb.Wire.CreateDatabaseReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDatabase",
        __Marshaller_streamsdb_api_CreateDatabaseRequest,
        __Marshaller_streamsdb_api_CreateDatabaseReply);

    static readonly grpc::Method<global::Streamsdb.Wire.ReadRequest, global::Streamsdb.Wire.Slice> __Method_Read = new grpc::Method<global::Streamsdb.Wire.ReadRequest, global::Streamsdb.Wire.Slice>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_streamsdb_api_ReadRequest,
        __Marshaller_streamsdb_api_Slice);

    static readonly grpc::Method<global::Streamsdb.Wire.AppendRequest, global::Streamsdb.Wire.AppendReply> __Method_Append = new grpc::Method<global::Streamsdb.Wire.AppendRequest, global::Streamsdb.Wire.AppendReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Append",
        __Marshaller_streamsdb_api_AppendRequest,
        __Marshaller_streamsdb_api_AppendReply);

    static readonly grpc::Method<global::Streamsdb.Wire.ReadRequest, global::Streamsdb.Wire.Slice> __Method_Watch = new grpc::Method<global::Streamsdb.Wire.ReadRequest, global::Streamsdb.Wire.Slice>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Watch",
        __Marshaller_streamsdb_api_ReadRequest,
        __Marshaller_streamsdb_api_Slice);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Streamsdb.Wire.ApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Streams</summary>
    public partial class StreamsClient : grpc::ClientBase<StreamsClient>
    {
      /// <summary>Creates a new client for Streams</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StreamsClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Streams that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StreamsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StreamsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StreamsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Streamsdb.Wire.GetDatabasesReply GetDatabases(global::Streamsdb.Wire.GetDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.GetDatabasesReply GetDatabases(global::Streamsdb.Wire.GetDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabases, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.GetDatabasesReply> GetDatabasesAsync(global::Streamsdb.Wire.GetDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.GetDatabasesReply> GetDatabasesAsync(global::Streamsdb.Wire.GetDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabases, null, options, request);
      }
      public virtual global::Streamsdb.Wire.GetDatabaseReply GetDatabase(global::Streamsdb.Wire.GetDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.GetDatabaseReply GetDatabase(global::Streamsdb.Wire.GetDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabase, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.GetDatabaseReply> GetDatabaseAsync(global::Streamsdb.Wire.GetDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.GetDatabaseReply> GetDatabaseAsync(global::Streamsdb.Wire.GetDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabase, null, options, request);
      }
      public virtual global::Streamsdb.Wire.LoginReply Login(global::Streamsdb.Wire.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.LoginReply Login(global::Streamsdb.Wire.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.LoginReply> LoginAsync(global::Streamsdb.Wire.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.LoginReply> LoginAsync(global::Streamsdb.Wire.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::Streamsdb.Wire.EnableAclReply EnableAcl(global::Streamsdb.Wire.EnableAclRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableAcl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.EnableAclReply EnableAcl(global::Streamsdb.Wire.EnableAclRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableAcl, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.EnableAclReply> EnableAclAsync(global::Streamsdb.Wire.EnableAclRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableAclAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.EnableAclReply> EnableAclAsync(global::Streamsdb.Wire.EnableAclRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableAcl, null, options, request);
      }
      public virtual global::Streamsdb.Wire.GrandUserToDatabaseReply GrandUserToDatabase(global::Streamsdb.Wire.GrandUserToDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GrandUserToDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.GrandUserToDatabaseReply GrandUserToDatabase(global::Streamsdb.Wire.GrandUserToDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GrandUserToDatabase, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.GrandUserToDatabaseReply> GrandUserToDatabaseAsync(global::Streamsdb.Wire.GrandUserToDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GrandUserToDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.GrandUserToDatabaseReply> GrandUserToDatabaseAsync(global::Streamsdb.Wire.GrandUserToDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GrandUserToDatabase, null, options, request);
      }
      public virtual global::Streamsdb.Wire.CreateUserReply CreateUser(global::Streamsdb.Wire.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.CreateUserReply CreateUser(global::Streamsdb.Wire.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.CreateUserReply> CreateUserAsync(global::Streamsdb.Wire.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.CreateUserReply> CreateUserAsync(global::Streamsdb.Wire.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateUser, null, options, request);
      }
      public virtual global::Streamsdb.Wire.CreateDatabaseReply CreateDatabase(global::Streamsdb.Wire.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.CreateDatabaseReply CreateDatabase(global::Streamsdb.Wire.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.CreateDatabaseReply> CreateDatabaseAsync(global::Streamsdb.Wire.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.CreateDatabaseReply> CreateDatabaseAsync(global::Streamsdb.Wire.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      public virtual global::Streamsdb.Wire.Slice Read(global::Streamsdb.Wire.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.Slice Read(global::Streamsdb.Wire.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.Slice> ReadAsync(global::Streamsdb.Wire.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.Slice> ReadAsync(global::Streamsdb.Wire.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      public virtual global::Streamsdb.Wire.AppendReply Append(global::Streamsdb.Wire.AppendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Append(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Streamsdb.Wire.AppendReply Append(global::Streamsdb.Wire.AppendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Append, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.AppendReply> AppendAsync(global::Streamsdb.Wire.AppendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AppendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Streamsdb.Wire.AppendReply> AppendAsync(global::Streamsdb.Wire.AppendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Append, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Streamsdb.Wire.Slice> Watch(global::Streamsdb.Wire.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Watch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Streamsdb.Wire.Slice> Watch(global::Streamsdb.Wire.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Watch, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StreamsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StreamsClient(configuration);
      }
    }

  }
}
#endregion
